name: assignment3
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: set date and name
      run: |
        echo "$(date -Iminutes)" >> log.txt
        echo "Tal Solovey" >> log.txt
    - name: Upload log file artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: log-file
        path: log.txt
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      id: build-image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: booksvr:latest
        outputs: type=docker,dest=/tmp/image.tar
    - name: Log docker image build result
      if: always()
      uses: actions/download-artifact@v4
      with:
        name: log-file
    - shell: bash
      if: always()
      run: |
        if [ ${{ steps.build-image.outcome }} == 'success' ]; then
          echo "image successfully built" >> log.txt
        else
          echo "image not able to be built" >> log.txt
        fi
    - name: Upload log file artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: log-file
        path: log.txt
        overwrite: true
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: booksvr
        path: /tmp/image.tar
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
    - name: Load Docker images from previous workflows
      run: docker load --input booksvr/image.tar
    - name: check booksvr image is loaded
      run: docker image ls
    - uses: actions/checkout@v3
    - name: Run docker-compose
      id: run-container
      run: docker compose up -d
    - name: Log container status result
      if: always()
      uses: actions/download-artifact@v4
      with:
        name: log-file
    - shell: bash
      if: always()
      run: |
        if [ ${{ steps.run-container.outcome }} == 'success' ]; then
          echo "Container up and running" >> log.txt
        else
          echo "Container failed to run" >> log.txt
        fi
        cat log.txt
    - name: Upload log file artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: log-file
        path: log.txt
        overwrite: true
    - name: Check containers are running
      run: docker ps
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with pytest
      id: run-tests
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
    - name: add test reults to log file
      uses: actions/download-artifact@v4
      with:
        name: log-file
    - shell: bash
      run: |
        if [ ${{ steps.run-tests.outcome }} == 'success' ]; then
          echo "tests succeeded" >> log.txt
        else
          echo "tests failed" >> log.txt
        fi
    - name: Upload log file artifact
      uses: actions/upload-artifact@v4
      with:
        name: log-file
        path: log.txt
        overwrite: true
    - name: upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: tests/assn3_test_results.txt
  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
    - name: Load Docker images from previous workflows
      run: docker load --input booksvr/image.tar
    - name: check booksvr image is loaded
      run: docker image ls
    - uses: actions/checkout@v3
    - name: Run docker-compose
      run: docker compose up -d
    - name: Check containers are running
      run: docker ps
    - name: Wait for server to start
      run: sleep 10
    - name: create directory
      run: mkdir -p mypath
    - name: curl
      run: |
        echo curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"}' >> mypath/results
        echo $(curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"Adventures of Huckleberry Finn", "ISBN":"9780520343641", "genre":"Fiction"}') >> mypath/results
        echo curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"}' >> mypath/results
        echo $(curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"The Best of Isaac Asimov", "ISBN":"9780385050784", "genre":"Science Fiction"}') >> mypath/results
        echo curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"}' >> mypath/results
        echo $(curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"Fear No Evil", "ISBN":"9780394558783", "genre":"Biography"}') >> mypath/results
        echo curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"The Adventures of Tom Sawyer", "ISBN":"9780195810400", "genre":"Fiction"}' >> mypath/results
        echo $(curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title":"The Adventures of Tom Sawyer", "ISBN":"9780195810400", "genre":"Fiction"}') >> mypath/results
        echo curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title": "I, Robot", "ISBN":"9780553294385", "genre":"Science Fiction"}' >> mypath/results
        echo $(curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title": "I, Robot", "ISBN":"9780553294385", "genre":"Science Fiction"}') >> mypath/results
        echo curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title": "Second Foundation", "ISBN":"9780553293364", "genre":"Science Fiction"}' >> mypath/results
        echo $(curl --location --request POST 'http://127.0.0.1:5001/books' --header 'Content-Type: application/json' --data '{"title": "Second Foundation", "ISBN":"9780553293364", "genre":"Science Fiction"}') >> mypath/results
    - name: curl results
      run: cat mypath/results
    - name: run queries
      run: |
        for query in $(cat query.txt); do
          echo "query: $query" >> response.txt
          response=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" --location --request GET "http://127.0.0.1:5001/books${query}")
          http_status=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          json_response=$(echo "$response" | sed -e 's/HTTPSTATUS\:.*//g')
          if [ "$http_status" -ne 200 ]; then
            echo "error $http_status" >> response.txt
          else
            echo "$json_response" >> response.txt
          fi
        done
    - name: Upload response file
      uses: actions/upload-artifact@v4
      with:
        name: response-results
        path: response.txt

